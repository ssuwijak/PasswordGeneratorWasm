@page "/pwdgen"
@using PasswordGeneratorWasm.Shared.Components

<PageTitle>Password Generator</PageTitle>

<h1>Password Generator</h1>

<div class="form-group">
	<PwdCopy Title="Password Suggestion" Text="@Passwd"></PwdCopy>

	<button class="btn btn-outline-primary mt-1" @onclick="Generate"><i class="oi oi-reload"></i> Refresh</button>

	<PwdPaste Title="Test Clipboard"></PwdPaste>
</div>

<div class="form-group">
	<label for="rngLength" class="form-label">Password Length :</label>

	<input type="number" id="txtLength" class="form-control" readonly @bind-value="@rng.Value" @oninput="pwdNumberText_OnInput" />

	<input type="range" class="form-range" id="rngLength"
		   min="@rng.Min" max="@rng.Max" step="@rng.Step" value="@rng.Value" @oninput="pwdLengthSlider_OnInput" />
</div>

<PwdOptions @ref="X1" OnChange="pwdOption_OnChanged"></PwdOptions>

@code {
	private PwdOptions X1;
	private MyRange rng = new MyRange(1, 32, 16);

	public string? Passwd { get; set; } = "";

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
			rng.Min = X1.CountSelected();
	}

	private void pwdOption_OnChanged()
	{
		rng.Min = X1.CountSelected();
		Generate();
	}

	private void pwdLengthSlider_OnInput(ChangeEventArgs e)
	{
		// adjustLength(e);
		rng.Value = int.Parse(e.Value.ToString());
		Generate();
	}

	private void pwdNumberText_OnInput(ChangeEventArgs e)
	{
		adjustLength(e);
	}

	private void adjustLength(ChangeEventArgs e)
	{
		int i = 0;
		int j = rng.Value;

		try
		{
			i = int.Parse(e.Value.ToString());
		}
		catch (Exception ex)
		{
			string s = ex.Message;
			i = j;
		}

		if (i < rng.Min) i = rng.Min;
		else if (i > rng.Max) i = rng.Max;
		else j = i;

		rng.Value = i;
		Generate();
	}

	public void Generate()
	{
		string modes = "";

		if (X1.Options[0].Checked) modes += "a";
		if (X1.Options[1].Checked) modes += "A";
		if (X1.Options[2].Checked) modes += "1";
		if (X1.Options[3].Checked) modes += "#";

		Shared.PwdGenerator pwd = new Shared.PwdGenerator();
		Passwd = pwd.Generate(rng.Value, modes);
	}


}
